"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("../utils/Logger");
const EnvVarService_1 = require("../utils/EnvVarService");
class EnvVars {
    constructor(mEnvSrv = new EnvVarService_1.EnvVarService(EnvVars.ENV_PREFIX)) {
        this.mEnvSrv = mEnvSrv;
    }
    read() {
        const additionalResultsProcessorsValue = this.mEnvSrv.readEnvValue("ADDITIONAL_RESULTS_PROCESSORS");
        let additionalResultsProcessors;
        if (additionalResultsProcessorsValue != null) {
            try {
                additionalResultsProcessors = JSON.parse(additionalResultsProcessorsValue);
            }
            catch (e) {
                Logger_1.Logger.get.error("Could not parse additional results processors value." +
                    "It should be a JSON string of an array of strings, like the following: " +
                    JSON.stringify(["jest-html-reporter"]) + "\n You specified: " + additionalResultsProcessorsValue);
            }
        }
        return {
            resultDir: this.mEnvSrv.readEnvValue("RESULT_DIR"),
            resultJson: this.mEnvSrv.readEnvValue("RESULT_JSON"),
            resultHtml: this.mEnvSrv.readEnvValue("RESULT_HTML"),
            log: this.mEnvSrv.readBoolEnvValue("LOG"),
            jestStareConfigJson: this.mEnvSrv.readEnvValue("CONFIG_JSON"),
            jestGlobalConfigJson: this.mEnvSrv.readEnvValue("GLOBAL_CONFIG_JSON"),
            coverageLink: this.mEnvSrv.readEnvValue("COVERAGE_LINK"),
            report: this.mEnvSrv.readBoolEnvValue("REPORT"),
            additionalResultsProcessors,
        };
    }
    resolve(packageJsonConfig, envConfig) {
        const mergedConfig = {};
        if (envConfig.resultDir != null || packageJsonConfig.resultDir != null) {
            mergedConfig.resultDir = envConfig.resultDir == null ? packageJsonConfig.resultDir : envConfig.resultDir;
        }
        if (envConfig.resultJson != null || packageJsonConfig.resultJson != null) {
            mergedConfig.resultJson = envConfig.resultJson == null ? packageJsonConfig.resultJson : envConfig.resultJson;
        }
        if (envConfig.resultHtml != null || packageJsonConfig.resultHtml != null) {
            mergedConfig.resultHtml = envConfig.resultHtml == null ? packageJsonConfig.resultHtml : envConfig.resultHtml;
        }
        if (envConfig.log != null || packageJsonConfig.log != null) {
            mergedConfig.log = envConfig.log == null ? packageJsonConfig.log : envConfig.log;
        }
        if (envConfig.report != null || packageJsonConfig.report != null) {
            mergedConfig.report = envConfig.report == null ? packageJsonConfig.report : envConfig.report;
        }
        if (envConfig.jestStareConfigJson != null || packageJsonConfig.jestStareConfigJson != null) {
            mergedConfig.jestStareConfigJson =
                envConfig.jestStareConfigJson == null ? packageJsonConfig.jestStareConfigJson : envConfig.jestStareConfigJson;
        }
        if (envConfig.jestGlobalConfigJson != null || packageJsonConfig.jestGlobalConfigJson != null) {
            mergedConfig.jestGlobalConfigJson =
                envConfig.jestGlobalConfigJson == null ? packageJsonConfig.jestGlobalConfigJson : envConfig.jestGlobalConfigJson;
        }
        if (envConfig.coverageLink != null || packageJsonConfig.coverageLink != null) {
            mergedConfig.coverageLink = envConfig.coverageLink == null ? packageJsonConfig.coverageLink : envConfig.coverageLink;
        }
        if (envConfig.additionalResultsProcessors != null || packageJsonConfig.additionalResultsProcessors != null) {
            mergedConfig.additionalResultsProcessors =
                envConfig.additionalResultsProcessors == null ? packageJsonConfig.additionalResultsProcessors : envConfig.additionalResultsProcessors;
        }
        return mergedConfig;
    }
}
EnvVars.ENV_PREFIX = "JEST_STARE_";
exports.EnvVars = EnvVars;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW52VmFycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcm9jZXNzb3IvRW52VmFycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDRDQUF5QztBQUN6QywwREFBdUQ7QUFPdkQ7SUFjSSxZQUFvQixVQUFVLElBQUksNkJBQWEsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO1FBQS9DLFlBQU8sR0FBUCxPQUFPLENBQXdDO0lBQUcsQ0FBQztJQU9oRSxJQUFJO1FBQ1AsTUFBTSxnQ0FBZ0MsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1FBQ3BHLElBQUksMkJBQXFDLENBQUM7UUFDMUMsSUFBSSxnQ0FBZ0MsSUFBSSxJQUFJLEVBQUU7WUFDMUMsSUFBSTtnQkFDQSwyQkFBMkIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7YUFDOUU7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDUixlQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxzREFBc0Q7b0JBQ25FLHlFQUF5RTtvQkFDekUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUMsR0FBRyxvQkFBb0IsR0FBRyxnQ0FBZ0MsQ0FBQyxDQUFDO2FBQ3pHO1NBQ0o7UUFDRCxPQUFPO1lBQ0gsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQztZQUNsRCxVQUFVLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDO1lBQ3BELFVBQVUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUM7WUFDcEQsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDO1lBQ3pDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFD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