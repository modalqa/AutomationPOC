"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Constants_1 = require("../Constants");
const Test_1 = require("../tests/Test");
class TestSuite {
    static create(results) {
        const elements = [];
        results.testResults.forEach((testResult) => {
            if (testResult.testResults == null) {
                console.error("Unexpected testResults field missing");
                if (testResult.assertionResults != null) {
                    console.warn("Attempting to use assertionResults: results are unpredictable");
                    testResult.testResults = testResult.assertionResults;
                }
            }
            let testStatusClass;
            const testSectionStatus = new Map();
            for (const result of testResult.testResults) {
                if (result.status === Constants_1.Constants.TEST_STATUS_FAIL) {
                    if (testStatusClass === Constants_1.Constants.BOTH_TEST) {
                    }
                    else if (testStatusClass === Constants_1.Constants.PASSED_TEST) {
                        testStatusClass = Constants_1.Constants.BOTH_TEST;
                    }
                    else {
                        testStatusClass = Constants_1.Constants.FAILED_TEST;
                    }
                    for (let index = 0; index < result.ancestorTitles.length; index++) {
                        const titlesCopy = result.ancestorTitles.slice();
                        titlesCopy.splice(index + 1);
                        const key = titlesCopy.join(TestSuite.JOIN_CHAR);
                        if (testSectionStatus.has(key)) {
                            if (testSectionStatus.get(key) === Constants_1.Constants.PASSED_TEST) {
                                testSectionStatus.set(key, Constants_1.Constants.BOTH_TEST);
                            }
                        }
                        else {
                            testSectionStatus.set(key, Constants_1.Constants.FAILED_TEST);
                        }
                    }
                }
                if (result.status === Constants_1.Constants.TEST_STATUS_PASS) {
                    if (testStatusClass === Constants_1.Constants.BOTH_TEST) {
                    }
                    else if (testStatusClass === Constants_1.Constants.FAILED_TEST) {
                        testStatusClass = Constants_1.Constants.BOTH_TEST;
                    }
                    else {
                        testStatusClass = Constants_1.Constants.PASSED_TEST;
                    }
                    for (let index = 0; index < result.ancestorTitles.length; index++) {
                        const titlesCopy = result.ancestorTitles.slice();
                        titlesCopy.splice(index + 1);
                        const key = titlesCopy.join(TestSuite.JOIN_CHAR);
                        if (testSectionStatus.has(key)) {
                            if (testSectionStatus.get(key) === Constants_1.Constants.FAILED_TEST) {
                                testSectionStatus.set(key, Constants_1.Constants.BOTH_TEST);
                            }
                        }
                        else {
                            testSectionStatus.set(key, Constants_1.Constants.PASSED_TEST);
                        }
                    }
                }
            }
            if (testStatusClass === undefined) {
                testStatusClass = Constants_1.Constants.PASSED_TEST;
            }
            const div = document.createElement("div");
            div.classList.add("my-3", "p-3", "bg-white", "rounded", "box-shadow", testStatusClass);
            const h5 = document.createElement("h5");
            h5.classList.add("border-bottom", "pb-2", "mb-0", "display-5");
            h5.textContent = testResult.testFilePath;
            div.appendChild(h5);
            const divMap = new Map();
            testResult.testResults.forEach((test) => {
                const element = Test_1.Test.create(test);
                if (test.ancestorTitles.length > 0) {
                    test.ancestorTitles.forEach((title, index) => {
                        const titlesCopy = test.ancestorTitles.slice();
                        titlesCopy.splice(index + 1);
                        const key = titlesCopy.join(TestSuite.JOIN_CHAR);
                        if (divMap.has(key)) {
                            divMap.get(key).appendChild(element);
                        }
                        else {
                            const nestDiv = document.createElement("div");
                            const statusClass = testSectionStatus.get(key) || Constants_1.Constants.PASSED_TEST;
                            nestDiv.classList.add("my-3", "p-3", "bg-white", "rounded", "box-shadow", statusClass);
                            const h6 = document.createElement("h6");
                            h6.classList.add("border-bottom", "pb-2", "mb-0", "display-6");
                            h6.textContent = title;
                            nestDiv.appendChild(h6);
                            nestDiv.appendChild(element);
                            divMap.set(key, nestDiv);
                            if (index === 0) {
                                div.appendChild(nestDiv);
                            }
                            else {
                                titlesCopy.pop();
                                const parentKey = titlesCopy.join(TestSuite.JOIN_CHAR);
                                divMap.get(parentKey).appendChild(nestDiv);
                            }
                        }
                    });
                }
                else {
                    div.appendChild(element);
                }
            });
            elements.push(div);
        });
        return elements;
    }
}
TestSuite.JOIN_CHAR = ".";
exports.TestSuite = TestSuite;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdFN1aXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JlbmRlci9zdWl0ZXMvVGVzdFN1aXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNENBQXlDO0FBQ3pDLHdDQUFxQztBQU9yQztJQWVXLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBOEI7UUFDL0MsTUFBTSxRQUFRLEdBQWtCLEVBQUUsQ0FBQztRQUVuQyxPQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBUXZDLElBQUksVUFBVSxDQUFDLFdBQVcsSUFBSSxJQUFJLEVBQUU7Z0JBRWhDLE9BQU8sQ0FBQyxLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQztnQkFDdEQsSUFBSyxVQUFrQixDQUFDLGdCQUFnQixJQUFJLElBQUksRUFBRTtvQkFFOUMsT0FBTyxDQUFDLElBQUksQ0FBQywrREFBK0QsQ0FBQyxDQUFDO29CQUM5RSxVQUFVLENBQUMsV0FBVyxHQUFJLFVBQWtCLENBQUMsZ0JBQWdCLENBQUM7aUJBQ2pFO2FBQ0o7WUFHRCxJQUFJLGVBQWUsQ0FBQztZQUVwQixNQUFNLGlCQUFpQixHQUF3QixJQUFJLEdBQUcsRUFBa0IsQ0FBQztZQUN6RSxLQUFLLE1BQU0sTUFBTSxJQUFJLFVBQVUsQ0FBQyxXQUFXLEVBQUU7Z0JBR3pDLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxxQkFBUyxDQUFDLGdCQUFnQixFQUFFO29CQUM5QyxJQUFJLGVBQWUsS0FBSyxxQkFBUyxDQUFDLFNBQVMsRUFBRTtxQkFFNUM7eUJBQU0sSUFBSSxlQUFlLEtBQUsscUJBQVMsQ0FBQyxXQUFXLEVBQUU7d0JBQ2xELGVBQWUsR0FBRyxxQkFBUyxDQUFDLFNBQVMsQ0FBQztxQkFDekM7eUJBQU07d0JBQ0gsZUFBZSxHQUFHLHFCQUFTLENBQUMsV0FBVyxDQUFDO3FCQUMzQztvQkFFRCxLQUFLLElBQUksS0FBSyxHQUFHLENBQUMs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